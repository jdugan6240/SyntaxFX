/* The following code was generated by JFlex 1.6.1 */

package syntaxfx.lexers

import syntaxfx.Lexer
import syntaxfx.Token


import java.io.Reader
import scala.util.control.Breaks._

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/jdugan/projects/syntaxfx/src/main/flex/JavaLexer.flex</tt>
 */
final class JavaLexer(in: Reader)  extends Lexer {

  /** This character denotes the end of file */
  final val YYEOF = -1

  /** initial size of the lookahead buffer */
  final val ZZ_BUFFERSIZE = 16384

  /** lexical states */
  final val YYINITIAL = 0
  final val STRING = 2
  final val CHARLITERAL = 4
  final val JDOC = 6
  final val JDOC_TAG = 8

  /**
   * ZZ_LEXSTATE(l) is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE(l+1) is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  final val ZZ_LEXSTATE = Array[Int]( 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  )

  /** 
   * Translates characters to character classes
   */
  final val ZZ_CMAP_PACKED: String = 
    "\11\6\1\0\1\2\1\67\1\67\1\1\16\6\4\0\1\0\1\62\1\23\1\0\1\5\1\62\1\64\1\24\1\56\1\56\1\4\1\66\1\56\1\22\1\20\1\3\1\7\1\15\2\14\4\16\2\10\1\63\1\56\1\61\1\57\1\60\1\56\1\71\3\13\1\17\1\21\1\17\5\72\1\11\13\72\1\12\2\72\1\56\1\25\1\56\1\62\1\5\1\0\1\27\1\41\1\30\1\37\1\33\1\46\1\32\1\51\1\36\1\72\1\31\1\42\1\54\1\47\1\35\1\26\1\72\1\43\1\45\1\44\1\40\1\34\1\55\1\53\1\50\1\52\1\56\1\65\1\56\1\56\6\6\1\70\32\6\2\0\4\5\4\0\1\72\2\0\1\6\7\0\1\72\4\0\1\72\5\0\27\72\1\0\37\72\1\0\u01ca\72\4\0\14\72\16\0\5\72\7\0\1\72\1\0\1\72\21\0\160\6\5\72\1\0\2\72\2\0\4\72\1\0\1\72\6\0\1\72\1\0\3\72\1\0\1\72\1\0\24\72\1\0\123\72\1\0\213\72\1\0\5\6\2\0\246\72\1\0\46\72\2\0\1\72\7\0\47\72\7\0\1\5\1\0\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0\33\72\5\0\3\72\15\0\6\6\5\0\1\5\4\0\13\6\1\0\1\6\3\0\53\72\37\6\4\0\2\72\1\6\143\72\1\0\1\72\10\6\1\0\6\6\2\72\2\6\1\0\4\6\2\72\12\6\3\72\2\0\1\72\17\0\1\6\1\72\1\6\36\72\33\6\2\0\131\72\13\6\1\72\16\0\12\6\41\72\11\6\2\72\4\0\1\72\5\0\26\72\4\6\1\72\11\6\1\72\3\6\1\72\5\6\22\0\31\72\3\6\4\0\13\5\65\0\23\72\2\5\1\0\10\5\26\0\60\6\66\72\3\6\1\72\22\6\1\72\7\6\12\72\2\6\2\0\12\6\1\0\20\72\3\6\1\0\10\72\2\0\2\72\2\0\26\72\1\0\7\72\1\0\1\72\3\0\4\72\2\0\1\6\1\72\7\6\2\0\2\6\2\0\3\6\1\72\10\0\1\6\4\0\2\72\1\0\3\72\2\6\2\0\12\6\2\72\2\5\7\0\2\5\4\0\3\6\1\0\6\72\4\0\2\72\2\0\26\72\1\0\7\72\1\0\2\72\1\0\2\72\1\0\2\72\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\72\1\0\1\72\7\0\14\6\3\72\1\6\13\0\3\6\1\0\11\72\1\0\3\72\1\0\26\72\1\0\7\72\1\0\2\72\1\0\5\72\2\0\1\6\1\72\10\6\1\0\3\6\1\0\3\6\2\0\1\72\17\0\2\72\2\6\2\0\12\6\1\0\1\5\7\0\1\5\6\6\1\0\3\6\1\0\10\72\2\0\2\72\2\0\26\72\1\0\7\72\1\0\2\72\1\0\5\72\2\0\1\6\1\72\7\6\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\72\1\0\3\72\2\6\2\0\12\6\1\0\1\72\20\0\1\6\1\72\1\0\6\72\3\0\3\72\1\0\4\72\3\0\2\72\1\0\1\72\1\0\2\72\3\0\2\72\3\0\3\72\3\0\14\72\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\72\6\0\1\6\16\0\12\6\11\0\1\5\6\0\4\6\1\0\10\72\1\0\3\72\1\0\27\72\1\0\20\72\3\0\1\72\7\6\1\0\3\6\1\0\4\6\7\0\2\6\1\0\2\72\1\5\5\0\2\72\2\6\2\0\12\6\20\0\1\5\3\6\1\0\10\72\1\0\3\72\1\0\27\72\1\0\12\72\1\0\5\72\2\0\1\6\1\72\7\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0\1\72\1\0\2\72\2\6\2\0\12\6\1\0\2\72\15\0\4\6\1\0\10\72\1\0\3\72\1\0\51\72\2\6\1\72\7\6\1\0\3\6\1\0\4\6\1\72\5\0\3\5\1\6\7\0\1\5\2\72\2\6\2\0\12\6\12\0\6\72\2\0\2\6\1\0\22\72\3\0\30\72\1\0\11\72\1\0\1\72\2\0\7\72\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\6\0\12\6\2\0\2\6\15\0\60\72\1\6\2\72\7\6\4\0\1\5\7\72\10\6\1\0\12\6\47\0\2\72\1\0\1\72\2\0\2\72\1\0\1\72\2\0\1\72\6\0\4\72\1\0\7\72\1\0\3\72\1\0\1\72\1\0\1\72\2\0\2\72\1\0\4\72\1\6\2\72\6\6\1\0\2\6\1\72\2\0\5\72\1\0\1\72\1\0\6\6\2\0\12\6\2\0\4\72\40\0\1\72\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\72\1\0\44\72\4\0\24\6\1\0\2\6\5\72\13\6\1\0\44\6\11\0\1\6\71\0\53\72\24\6\1\72\12\6\6\0\6\72\4\6\4\72\3\6\1\72\3\6\2\72\7\6\3\72\4\6\15\72\14\6\1\72\17\6\2\0\46\72\1\0\1\72\5\0\1\72\2\0\53\72\1\0\u014d\72\1\0\4\72\2\0\7\72\1\0\1\72\1\0\4\72\2\0\51\72\1\0\4\72\2\0\41\72\1\0\4\72\2\0\7\72\1\0\1\72\1\0\4\72\2\0\17\72\1\0\71\72\1\0\4\72\2\0\103\72\2\0\3\6\40\0\20\72\20\0\125\72\1\5\2\0\6\5\3\0\u026c\72\2\0\21\72\1\0\32\72\5\0\113\72\3\0\3\5\10\72\7\0\15\72\1\0\4\72\3\6\13\0\22\72\3\6\13\0\22\72\2\6\14\0\15\72\1\0\3\72\1\0\2\6\14\0\64\72\40\6\3\0\1\72\3\0\1\5\1\72\1\6\2\0\12\6\41\0\4\6\1\0\12\6\6\0\130\72\10\0\5\72\2\73\42\72\1\6\1\72\5\0\106\72\12\0\37\72\1\0\14\6\4\0\14\6\12\0\12\6\36\72\2\0\5\72\13\0\54\72\4\0\21\5\7\72\2\5\6\0\12\6\46\0\27\72\5\6\4\0\65\72\12\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0\1\72\10\0\16\6\102\0\5\6\57\72\21\6\7\72\4\0\12\6\21\0\11\6\14\0\3\6\36\72\15\6\2\72\12\6\54\72\16\6\14\0\44\72\24\6\10\0\12\6\3\0\3\72\12\6\44\72\2\0\11\5\107\0\3\6\1\0\25\6\4\72\1\6\4\72\3\6\2\72\3\6\6\0\300\72\72\6\1\0\5\6\u0116\72\2\0\6\72\2\0\46\72\2\0\6\72\2\0\10\72\1\0\1\72\1\0\1\72\1\0\1\72\1\0\37\72\2\0\65\72\1\0\7\72\1\0\1\72\3\0\3\72\1\0\7\72\3\0\4\72\2\0\6\72\4\0\15\72\5\0\3\72\1\0\7\72\16\0\5\6\30\0\1\67\1\67\5\6\20\0\2\5\23\0\1\5\13\0\5\6\1\0\12\6\1\0\1\72\15\0\1\72\20\0\15\72\3\0\40\5\20\0\15\6\4\0\1\6\3\0\14\6\21\0\1\72\4\0\1\72\2\0\12\72\1\0\1\72\3\0\5\72\6\0\1\72\1\0\1\72\1\0\1\72\1\0\4\72\1\0\13\72\2\0\4\72\5\0\5\72\4\0\1\72\21\0\43\5\2\72\4\5\u0a77\0\57\72\1\0\57\72\1\0\205\72\6\0\4\72\3\6\2\72\14\0\46\72\1\0\1\72\5\0\1\72\2\0\70\72\7\0\1\72\17\0\1\6\27\72\11\0\7\72\1\0\7\72\1\0\7\72\1\0\7\72\1\0\7\72\1\0\7\72\1\0\7\72\1\0\7\72\1\0\40\6\57\0\1\72\u01d5\0\2\72\1\5\31\0\11\5\6\6\1\0\5\72\2\0\3\5\2\72\4\0\126\72\2\0\2\6\2\0\3\72\1\0\132\72\1\0\4\72\5\0\51\72\1\5\2\0\136\72\21\0\33\72\65\0\20\72\u0200\0\u19b6\72\112\0\u51cd\72\36\5\25\0\u048d\72\103\0\56\72\2\0\u010d\72\3\0\20\72\12\6\2\72\24\0\57\72\1\6\4\0\12\6\1\0\37\72\2\6\106\72\12\5\2\6\45\0\11\72\2\0\147\72\2\0\4\72\1\5\36\72\1\5\1\0\2\72\6\5\77\0\13\72\1\6\3\72\1\6\4\72\1\6\27\72\5\6\20\0\1\5\7\0\64\72\14\0\2\6\62\72\22\6\12\0\12\6\6\0\22\6\6\72\3\0\1\72\1\0\1\5\2\0\12\6\34\72\10\6\2\0\27\72\15\6\14\0\35\72\3\0\4\6\57\72\16\6\16\0\1\72\12\6\6\0\5\72\1\6\12\72\12\6\5\72\1\0\51\72\16\6\11\0\3\72\1\6\10\72\2\6\2\0\12\6\6\0\27\72\3\0\1\72\3\6\62\72\1\6\1\72\3\6\2\72\2\6\5\72\2\6\1\72\1\6\1\72\30\0\3\72\2\0\13\72\5\6\2\0\3\72\2\6\12\0\6\72\2\0\6\72\2\0\6\72\11\0\7\72\1\0\7\72\1\0\53\72\1\0\4\72\4\5\2\72\12\0\120\5\43\72\10\6\1\0\2\6\2\0\12\6\6\0\u2ba4\72\14\0\27\72\4\0\61\72\u2104\0\u016e\72\2\0\152\72\46\0\7\72\14\0\5\72\5\0\1\72\1\6\12\72\1\0\15\72\1\0\5\72\1\0\1\72\1\0\2\72\1\0\2\72\1\0\154\72\41\0\u016b\72\22\0\100\72\2\0\66\72\50\0\14\72\1\5\3\0\20\6\20\0\20\6\3\0\2\5\30\0\3\5\31\0\1\5\6\0\5\72\1\0\207\72\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\72\4\0\1\5\1\0\32\72\13\0\131\72\3\0\6\72\2\0\6\72\2\0\6\72\2\0\3\72\3\0\2\5\3\0\2\5\22\0\3\6\4\0\14\72\1\0\32\72\1\0\23\72\1\0\2\72\1\0\17\72\2\0\16\72\42\0\173\72\105\0\65\5\210\0\1\6\202\0\35\72\3\0\61\72\17\0\1\6\37\0\40\72\15\0\3\5\21\72\1\5\10\72\1\5\5\0\46\72\5\6\5\0\36\72\2\0\44\72\4\0\10\72\1\0\5\5\52\0\236\72\2\0\12\6\6\0\44\5\4\0\44\5\4\0\50\72\10\0\64\72\234\0\u0137\72\11\0\26\72\12\0\10\72\230\0\6\72\2\0\1\72\1\0\54\72\1\0\2\72\3\0\1\72\2\0\27\72\12\0\27\72\11\0\37\72\101\0\23\5\1\0\2\5\12\0\26\72\12\0\32\72\106\0\70\72\6\0\2\72\100\0\1\72\3\6\1\0\2\6\5\0\4\6\4\72\1\0\3\72\1\0\33\72\4\0\3\6\4\0\1\6\40\0\35\72\3\0\35\72\43\0\10\72\1\0\34\72\2\6\31\0\66\72\12\0\26\72\12\0\23\72\15\0\22\72\156\0\111\72\67\0\63\5\15\0\63\5\u030d\0\3\6\65\72\17\6\37\0\12\6\17\0\4\6\55\72\13\6\2\0\1\6\22\0\31\72\7\0\12\6\6\0\3\6\44\72\16\6\1\0\12\6\20\0\43\72\1\6\2\0\1\72\11\0\3\6\60\72\16\6\4\72\5\0\3\6\3\0\12\6\1\72\1\0\1\5\43\0\22\72\1\0\31\72\14\6\6\0\1\6\101\0\7\5\1\0\1\5\1\0\4\5\1\0\17\5\1\0\12\5\7\0\57\72\14\6\5\0\12\6\6\0\4\6\1\0\10\72\2\0\2\72\2\0\26\72\1\0\7\72\1\0\2\72\1\0\5\72\2\0\1\6\1\72\7\6\2\0\2\6\2\0\3\6\2\0\1\5\6\0\1\6\5\0\5\72\2\6\2\0\7\6\3\0\5\6\213\0\65\5\22\6\4\5\5\0\12\6\46\0\60\72\24\6\2\72\1\0\1\72\10\0\12\6\246\0\57\72\7\6\2\0\11\6\27\0\4\5\2\6\42\0\60\72\21\6\3\0\1\72\13\0\12\6\46\0\53\72\15\6\10\0\12\6\66\0\32\5\3\0\17\6\4\0\12\6\u0166\0\100\72\12\6\25\0\1\72\u0100\0\1\5\12\6\50\5\7\6\1\5\4\6\10\0\1\6\10\0\1\5\13\6\50\5\2\0\4\5\20\6\46\0\71\72\u0107\0\11\5\1\0\45\5\10\6\1\0\10\6\1\5\17\0\12\6\30\0\36\5\2\0\26\6\1\0\16\6\111\0\7\5\1\0\2\5\1\0\46\5\6\6\3\0\1\6\1\0\2\6\1\0\7\6\1\5\1\6\10\0\12\6\u02a6\0\u0399\72\1\5\146\0\157\5\21\0\304\5\u0abc\0\u042f\72\u0fd1\0\u0247\5\u21b9\0\u0239\72\7\0\37\72\1\0\12\6\146\0\36\72\2\0\5\6\13\0\60\72\7\6\11\0\4\72\14\0\12\6\11\0\25\72\5\0\23\72\u0370\0\105\72\13\0\1\72\56\6\20\0\4\6\15\72\100\0\2\5\36\0\u17ed\5\23\0\u02f3\5\u250d\0\2\72\u011d\5\121\0\u018c\5\u0904\0\153\72\5\0\15\72\3\0\11\72\7\0\12\72\3\0\2\6\1\0\4\6\u14c1\0\5\6\3\0\26\6\2\0\7\6\36\0\4\6\224\0\3\6\u01bb\0\125\72\1\0\107\72\1\0\2\72\2\0\1\72\2\0\2\72\2\0\4\72\1\0\14\72\1\0\1\72\1\0\7\72\1\0\101\72\1\0\4\72\2\0\10\72\1\0\7\72\1\0\34\72\1\0\4\72\1\0\5\72\1\0\1\72\3\0\7\72\1\0\u0154\72\2\0\31\72\1\0\31\72\1\0\37\72\1\0\31\72\1\0\37\72\1\0\31\72\1\0\37\72\1\0\31\72\1\0\37\72\1\0\31\72\1\0\10\72\2\0\62\6\u0200\0\67\6\4\0\62\6\10\0\1\6\16\0\1\6\26\0\5\6\1\0\17\6\u0550\0\7\6\1\0\21\6\2\0\7\6\1\0\2\6\1\0\5\6\u07d5\0\305\72\13\0\7\6\51\0\104\5\7\6\5\0\12\6\u04a6\0\4\72\1\0\33\72\1\0\2\72\1\0\1\72\2\0\1\72\1\0\12\72\1\0\4\72\1\0\1\72\1\0\1\72\6\0\1\72\4\0\1\72\1\0\1\72\1\0\1\72\1\0\3\72\1\0\2\72\1\0\1\72\2\0\1\72\1\0\1\72\1\0\1\72\1\0\1\72\1\0\1\72\1\0\2\72\1\0\1\72\2\0\4\72\1\0\7\72\1\0\4\72\1\0\4\72\1\0\1\72\1\0\12\72\1\0\21\72\5\0\3\72\1\0\5\72\1\0\21\72\u1144\0\ua6d7\72\51\0\u1035\72\13\0\336\72\2\0\u1682\5\16\0\u1d31\5\u0c1f\0\u021e\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0"

  /** 
   * Translates characters to character classes
   */
  final val ZZ_CMAP: Array[Char] = zzUnpackCMap(ZZ_CMAP_PACKED)

  /** 
   * Translates DFA states to action switch labels.
   */

  private final val ZZ_ACTION_PACKED_0: String =
    "\5\0\1\1\2\2\1\3\2\4\2\2\1\5\1\6\17\3\6\2\1\7\2\10\1\11\1\1\1\12\2\13\1\1\2\14\1\15\2\16\1\17\1\20\1\0\3\4\1\0\3\4\1\0\14\3\1\21\17\3\1\2\1\22\2\23\1\24\1\25\1\17\2\20\1\0\1\26\4\4\1\0\34\3\1\23\2\0\2\4\13\3\1\27\13\3\2\4\15\3\1\21\2\3\1\27\1\3\2\4\11\3\2\4\5\3\2\4\2\3\2\4\1\3\2\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\5\4";

  def zzUnpackAction(): Array[Int] = {
    val result = new Array[Int](228)
    var offset = 0
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
    result
  }

  def zzUnpackAction(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_ACTION: Array[Int] = zzUnpackAction()


  /** 
   * Translates a state to a row index in the transition table
   */

  private final val ZZ_ROWMAP_PACKED_0: String =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u012c\0\u012c\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u012c\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u012c\0\u012c\0\u0834\0\u0870\0\u08ac\0\u012c\0\u08e8\0\u012c\0\u0924\0\u012c\0\u012c\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u012c\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u01e0\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u012c\0\u1248\0\u1284\0\u012c\0\u012c\0\u012c\0\u12c0\0\u012c\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u012c\0\u1b30\0\u1338\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u01e0\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u1e00\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"

  def zzUnpackRowMap(): Array[Int] = {
    val result = new Array[Int](228)
    var offset = 0
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
    result
  }

  def zzUnpackRowMap(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0  /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      val high = packed.charAt(i) << 16; i += 1
      result(j) = high | packed.charAt(i); j += 1; i += 1
    }
    j
  }
  private final val ZZ_ROWMAP: Array[Int] = zzUnpackRowMap()

  /** 
   * The transition table of the DFA
   */

  private final val ZZ_TRANS_PACKED_0: String =
    "\1\6\1\0\1\6\1\7\1\10\1\11\1\6\1\12\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16\1\17\1\6\1\20\1\21\1\22\1\11\1\23\1\24\1\25\1\11\1\26\1\27\1\11\1\30\1\11\1\31\1\32\1\33\1\34\1\35\5\11\1\36\1\37\1\10\1\40\1\41\1\10\1\37\1\42\1\43\1\44\2\0\1\6\1\11\1\6\1\45\1\46\1\47\20\45\1\50\1\45\1\51\46\45\1\52\1\53\1\54\21\52\1\50\1\55\46\52\1\56\1\0\2\56\1\57\62\56\2\0\1\60\2\56\1\61\1\0\2\61\1\62\4\61\3\63\3\61\1\63\1\61\1\63\4\61\30\63\11\61\2\0\1\61\2\63\77\0\1\64\1\65\52\0\1\37\73\0\1\37\21\0\13\11\1\0\1\11\4\0\30\11\12\0\1\11\1\0\2\11\7\0\1\66\1\67\1\70\1\71\1\0\1\72\1\73\1\72\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\4\0\1\71\27\0\2\13\1\70\2\0\3\13\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\74\3\0\3\74\77\0\1\37\34\0\1\37\21\0\13\11\1\0\1\11\4\0\1\11\1\76\10\11\1\77\2\11\1\100\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\13\11\1\101\3\11\1\102\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\103\5\11\1\104\4\11\1\105\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\7\11\1\106\20\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\107\10\11\1\110\2\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\7\11\1\111\20\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\20\11\1\112\5\11\1\113\1\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\114\1\11\1\112\20\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\15\11\1\115\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\116\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\15\11\1\117\5\11\1\120\4\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\121\3\11\1\122\4\11\1\123\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\124\5\11\1\125\1\126\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\127\10\11\1\130\15\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\23\11\1\131\4\11\12\0\1\11\1\0\2\11\57\0\1\37\1\132\72\0\1\37\1\0\1\10\71\0\1\37\4\0\1\37\66\0\1\37\5\0\1\37\65\0\1\37\6\0\1\37\5\0\1\45\2\0\20\45\1\0\1\45\1\0\46\45\2\0\1\47\71\0\1\133\2\0\4\133\1\134\4\133\2\134\1\135\50\133\2\0\3\133\1\52\2\0\21\52\2\0\46\52\2\0\1\54\71\0\1\136\2\0\64\136\2\0\3\136\3\0\1\137\101\0\3\63\3\0\1\63\1\0\1\63\4\0\30\63\5\0\1\140\6\0\2\63\1\64\1\141\1\142\71\64\4\143\1\144\67\143\7\0\1\66\1\67\1\70\2\0\1\72\1\73\1\72\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\67\3\0\3\67\1\70\1\74\1\75\11\0\1\75\3\0\1\70\6\0\1\70\34\0\1\145\1\146\2\0\5\146\1\0\1\146\5\0\2\146\2\0\1\146\3\0\1\146\1\0\1\146\4\0\1\146\34\0\1\147\1\67\1\70\2\0\3\147\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\1\72\1\67\1\70\2\0\3\72\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\74\3\0\3\74\1\70\1\0\1\75\11\0\1\75\3\0\1\70\6\0\1\70\34\0\2\150\3\0\3\150\3\0\1\151\43\0\1\151\12\0\13\11\1\0\1\11\4\0\2\11\1\152\25\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\13\11\1\153\14\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\7\11\1\154\1\155\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\17\11\1\156\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\17\11\1\157\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\160\1\161\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\162\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\163\26\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\164\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\17\11\1\161\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\165\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\166\3\11\1\167\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\170\27\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\20\11\1\171\7\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\172\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\173\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\174\10\11\1\161\7\11\1\112\5\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\15\11\1\175\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\176\13\11\1\177\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\200\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\201\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\107\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\15\11\1\112\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\202\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\203\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\204\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\205\17\11\12\0\1\11\1\0\2\11\57\0\1\37\1\10\22\0\1\135\4\0\3\135\64\0\1\206\4\0\3\206\57\0\1\142\71\0\4\143\1\207\67\143\3\0\1\142\1\210\76\0\1\145\1\146\1\70\1\0\5\146\1\0\1\146\5\0\2\146\2\0\1\146\3\0\1\146\1\0\1\146\1\70\3\0\1\146\34\0\2\211\1\70\1\0\5\211\1\0\1\211\5\0\2\211\2\0\1\211\3\0\1\211\1\0\1\211\1\70\3\0\1\211\34\0\1\212\1\67\1\70\2\0\3\212\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\150\3\0\3\150\1\70\17\0\1\70\6\0\1\70\34\0\2\150\3\0\3\150\62\0\13\11\1\0\1\11\4\0\3\11\1\213\24\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\214\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\215\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\6\11\1\216\21\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\217\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\220\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\2\11\1\221\25\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\112\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\222\1\223\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\17\11\1\224\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\7\11\1\112\20\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\225\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\11\11\1\226\16\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\227\26\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\7\11\1\220\4\11\1\230\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\231\26\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\232\26\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\12\11\1\233\15\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\234\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\7\11\1\235\20\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\214\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\236\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\2\11\1\237\25\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\160\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\240\26\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\241\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\112\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\161\13\11\12\0\1\11\1\0\2\11\3\143\1\142\1\207\67\143\7\0\2\242\1\70\1\0\5\242\1\0\1\242\5\0\2\242\2\0\1\242\3\0\1\242\1\0\1\242\1\70\3\0\1\242\34\0\1\243\1\67\1\70\2\0\3\243\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\32\0\13\11\1\0\1\11\4\0\1\11\1\244\26\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\245\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\246\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\247\26\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\15\11\1\250\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\15\11\1\251\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\23\11\1\112\4\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\252\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\226\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\17\11\1\226\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\253\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\254\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\255\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\12\11\1\256\15\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\3\11\1\112\24\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\15\11\1\257\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\17\11\1\260\10\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\27\11\1\261\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\2\11\1\262\25\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\23\11\1\263\4\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\264\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\6\11\1\265\21\11\12\0\1\11\1\0\2\11\7\0\2\266\1\70\1\0\5\266\1\0\1\266\5\0\2\266\2\0\1\266\3\0\1\266\1\0\1\266\1\70\3\0\1\266\34\0\1\267\1\67\1\70\2\0\3\267\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\32\0\13\11\1\0\1\11\4\0\4\11\1\265\23\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\2\11\1\226\25\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\2\11\1\270\25\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\265\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\11\1\271\26\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\112\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\272\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\11\11\1\224\16\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\273\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\26\11\1\274\1\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\251\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\112\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\275\17\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\16\11\1\276\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\15\11\1\277\12\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\300\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\226\22\11\12\0\1\11\1\0\2\11\7\0\2\301\1\70\1\0\5\301\1\0\1\301\5\0\2\301\2\0\1\301\3\0\1\301\1\0\1\301\1\70\3\0\1\301\34\0\1\302\1\67\1\70\2\0\3\302\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\32\0\13\11\1\0\1\11\4\0\16\11\1\303\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\2\11\1\223\25\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\12\11\1\161\15\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\14\11\1\265\13\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\304\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\5\11\1\305\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\20\11\1\306\7\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\7\11\1\307\20\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\22\11\1\112\5\11\12\0\1\11\1\0\2\11\7\0\2\310\1\70\1\0\5\310\1\0\1\310\5\0\2\310\2\0\1\310\3\0\1\310\1\0\1\310\1\70\3\0\1\310\34\0\1\311\1\67\1\70\2\0\3\311\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\32\0\13\11\1\0\1\11\4\0\5\11\1\166\22\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\312\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\223\6\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\1\226\27\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\21\11\1\313\6\11\12\0\1\11\1\0\2\11\7\0\2\314\1\70\1\0\5\314\1\0\1\314\5\0\2\314\2\0\1\314\3\0\1\314\1\0\1\314\1\70\3\0\1\314\34\0\1\315\1\67\1\70\2\0\3\315\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\32\0\13\11\1\0\1\11\4\0\16\11\1\224\11\11\12\0\1\11\1\0\2\11\5\0\13\11\1\0\1\11\4\0\10\11\1\316\17\11\12\0\1\11\1\0\2\11\7\0\2\317\1\70\1\0\5\317\1\0\1\317\5\0\2\317\2\0\1\317\3\0\1\317\1\0\1\317\1\70\3\0\1\317\34\0\1\320\1\67\1\70\2\0\3\320\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\32\0\13\11\1\0\1\11\4\0\24\11\1\303\3\11\12\0\1\11\1\0\2\11\7\0\2\321\1\70\1\0\5\321\1\0\1\321\5\0\2\321\2\0\1\321\3\0\1\321\1\0\1\321\1\70\3\0\1\321\34\0\1\322\1\67\1\70\2\0\3\322\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\323\1\70\1\0\5\323\1\0\1\323\5\0\2\323\2\0\1\323\3\0\1\323\1\0\1\323\1\70\3\0\1\323\34\0\1\324\1\67\1\70\2\0\3\324\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\325\1\70\1\0\5\325\1\0\1\325\5\0\2\325\2\0\1\325\3\0\1\325\1\0\1\325\1\70\3\0\1\325\34\0\1\326\1\67\1\70\2\0\3\326\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\327\1\70\1\0\5\327\1\0\1\327\5\0\2\327\2\0\1\327\3\0\1\327\1\0\1\327\1\70\3\0\1\327\34\0\1\330\1\67\1\70\2\0\3\330\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\331\1\70\1\0\5\331\1\0\1\331\5\0\2\331\2\0\1\331\3\0\1\331\1\0\1\331\1\70\3\0\1\331\34\0\1\332\1\67\1\70\2\0\3\332\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\333\1\70\1\0\5\333\1\0\1\333\5\0\2\333\2\0\1\333\3\0\1\333\1\0\1\333\1\70\3\0\1\333\34\0\1\334\1\67\1\70\2\0\3\334\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\335\1\70\1\0\5\335\1\0\1\335\5\0\2\335\2\0\1\335\3\0\1\335\1\0\1\335\1\70\3\0\1\335\34\0\1\336\1\67\1\70\2\0\3\336\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\337\1\70\1\0\5\337\1\0\1\337\5\0\2\337\2\0\1\337\3\0\1\337\1\0\1\337\1\70\3\0\1\337\34\0\1\340\1\67\1\70\2\0\3\340\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\36\0\1\70\30\0\1\70\40\0\1\341\1\67\1\70\2\0\3\341\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\1\342\1\67\1\70\2\0\3\342\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\1\343\1\67\1\70\2\0\3\343\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\1\344\1\67\1\70\2\0\3\344\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\34\0\2\67\1\70\2\0\3\67\1\70\1\74\1\75\11\0\1\75\3\0\1\70\2\0\1\70\3\0\1\70\25\0";

  def zzUnpackTrans(): Array[Int] = {
    val result = new Array[Int](12420)
    var offset = 0
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result)
    result
  }

  def zzUnpackTrans(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      var value = packed.charAt(i).toInt; i += 1
      value -= 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_TRANS: Array[Int] = zzUnpackTrans()


  /* error codes */
  private final val ZZ_UNKNOWN_ERROR = 0
  private final val ZZ_NO_MATCH = 1
  private final val ZZ_PUSHBACK_2BIG = 2

  /* error messages for the codes above */
  private final val ZZ_ERROR_MSG = Array[String](
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  )

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */

  private final val ZZ_ATTRIBUTE_PACKED_0: String =
    "\5\0\1\11\7\1\2\11\17\1\1\11\7\1\2\11\3\1\1\11\1\1\1\11\1\1\2\11\3\1\1\0\2\1\1\11\1\0\3\1\1\0\35\1\1\11\2\1\3\11\1\1\1\11\1\0\5\1\1\0\34\1\1\11\2\0\110\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  def zzUnpackAttribute(): Array[Int] = {
    val result = new Array[Int](228)
    var offset = 0
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
    result
  }

  def zzUnpackAttribute(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_ATTRIBUTE: Array[Int] = zzUnpackAttribute()

  /** the input device */
  var zzReader = in

  /** the current state of the DFA */
  var zzState = 0

  /** the current lexical state */
  var zzLexicalState = YYINITIAL

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  var zzBuffer = new Array[Char](ZZ_BUFFERSIZE)

  /** the textposition at the last accepting state */
  var zzMarkedPos = 0

  /** the current text position in the buffer */
  var zzCurrentPos = 0

  /** startRead marks the beginning of the yytext() string in the buffer */
  var zzStartRead = 0

  /** endRead marks the last character in the buffer, that has been read
      from input */
  var zzEndRead = 0

  /** number of newlines encountered up to the start of the matched text */
  var yyline = 0

  /** the number of characters up to the start of the matched text */
  var yychar = 0

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  var yycolumn = 0

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  var zzAtBOL = true

  /** zzAtEOF == true <=> the scanner is at the EOF */
  var zzAtEOF = false

  /** denotes if the user-EOF-code has already been executed */
  var zzEOFDone = false
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  var zzFinalHighSurrogate = 0

  /* user code: */
    var tokenStart : Int = 0
    var tokenLength : Int = 0

    //This constructor is needed because JFlex doesn't define a no-arg constructor.
    def this() {
        this(new java.io.StringReader(""))
    }

    def token(tokenType : Int) : Token = {
        return new Token(tokenType, yychar, yychar + yylength)
    }

    def setString(str : String) : Unit = {
        yyreset(new java.io.StringReader(str))
    }

    def getNextToken() : Token = {
        yylex()
    }



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  def zzUnpackCMap(packed: String): Array[Char] = {
    val map = new Array[Char](0x110000)
    var i = 0  /* index in packed string  */
    var j = 0  /* index in unpacked array */
    while (i < 3536) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      map(j) = value; j += 1; count -= 1
      while(count > 0){
        map(j) = value; j += 1; count -= 1
      }
    }
    map
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   */
  @throws[java.io.IOException]("if any I/O-Error occurs")
  def zzRefill(): Boolean = {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate
      zzFinalHighSurrogate = 0
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead)

      /* translate stored positions */
      zzEndRead-= zzStartRead
      zzCurrentPos-= zzStartRead
      zzMarkedPos-= zzStartRead
      zzStartRead = 0
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      val newBuffer = new Array[Char](zzBuffer.length*2)
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length)
      zzBuffer = newBuffer
      zzEndRead += zzFinalHighSurrogate
      zzFinalHighSurrogate = 0
    }

    /* fill the buffer with new input */
    val requested = zzBuffer.length - zzEndRead
    var numRead = zzReader.read(zzBuffer, zzEndRead, requested)

    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      numRead = zzReader.read(zzBuffer, zzEndRead, requested)
    }
    if (numRead > 0) {
      zzEndRead += numRead
      if (numRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer(zzEndRead - 1))) {
          zzEndRead -= 1
          zzFinalHighSurrogate = 1
        }
      }
      return false
    }

    true
  }

    
  /**
   * Closes the input stream.
   */
  @throws[java.io.IOException]
  def yyclose(): Unit = {
    zzAtEOF = true            /* indicate end of file */
    zzEndRead = zzStartRead  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close()
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  def yyreset(reader: java.io.Reader): Unit = {
    zzReader = reader
    zzAtBOL  = true
    zzAtEOF  = false
    zzEOFDone = false
    zzEndRead = 0
    zzStartRead = 0
    zzCurrentPos = 0
    zzMarkedPos = 0
    zzFinalHighSurrogate = 0
    yyline = 0
    yychar = 0
    yycolumn = 0
    zzLexicalState = YYINITIAL
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new Array[Char](ZZ_BUFFERSIZE)
  }


  /**
   * Returns the current lexical state.
   */
  def yystate(): Int = zzLexicalState


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  def yybegin(newState: Int): Unit = {
    zzLexicalState = newState
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  def yytext(): String = new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead)


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  def yycharat(pos: Int): Char = zzBuffer(zzStartRead+pos)


  /**
   * Returns the length of the matched text region.
   */
  def yylength(): Int = zzMarkedPos-zzStartRead


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  def zzScanError(errorCode: Int): Unit = {
    var message = ""
    try {
      message = ZZ_ERROR_MSG(errorCode)
    }
    catch {
      case e: ArrayIndexOutOfBoundsException => message = ZZ_ERROR_MSG(ZZ_UNKNOWN_ERROR)
    }

    throw new Error(message)
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
 def yypushback(number: Int): Unit = {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG)

    zzMarkedPos -= number
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   */
 @throws[java.io.IOException]("if any I/O-Error occurs")
 def yylex(): Token = {
    var zzInput = -1
    var zzAction = -1

    // cached fields:
    var zzCurrentPosL = -1
    var zzMarkedPosL = -1
    var zzEndReadL = zzEndRead
    var zzBufferL = zzBuffer
    val zzCMapL = ZZ_CMAP

    val zzTransL: Array[Int] = ZZ_TRANS
    val zzRowMapL: Array[Int] = ZZ_ROWMAP
    val zzAttrL: Array[Int] = ZZ_ATTRIBUTE

    var ret: Token = null

    while ((ret == null) && !zzAtEOF) {
      zzMarkedPosL = zzMarkedPos

      yychar += zzMarkedPosL-zzStartRead

      zzAction = -1

      zzCurrentPosL = zzMarkedPosL
      zzCurrentPos = zzMarkedPosL
      zzStartRead = zzMarkedPosL
  
      zzState = ZZ_LEXSTATE(zzLexicalState)

      // set up zzAction for empty match case:
      var zzAttributes = zzAttrL(zzState)
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState
      }


      breakable {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
            zzCurrentPosL += Character.charCount(zzInput)
          }
          else if (zzAtEOF) {
            zzInput = YYEOF
            break
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL
            zzMarkedPos   = zzMarkedPosL
            val eof = zzRefill()
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos
            zzMarkedPosL   = zzMarkedPos
            zzBufferL      = zzBuffer
            zzEndReadL     = zzEndRead
            if (eof) {
              zzInput = YYEOF
              break
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
              zzCurrentPosL += Character.charCount(zzInput)
            }
          }
          val zzNext = zzTransL(zzRowMapL(zzState) + zzCMapL(zzInput))
          if (zzNext == -1) break
          zzState = zzNext

          zzAttributes = zzAttrL(zzState)
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState
            zzMarkedPosL = zzCurrentPosL
            if ( (zzAttributes & 8) == 8 ) break
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL

      ret = if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true
        return null
      }
      else {
        (if (zzAction < 0) zzAction else ZZ_ACTION(zzAction)) match {
          case 1 => 
             null //We need this whenever we don't immediately return a token
          case 24 => null // noop
          case 2 => 
             return token(Token.OPERATOR)
          case 25 => null // noop
          case 3 => 
             return token(Token.IDENTIFIER)
          case 26 => null // noop
          case 4 => 
             return token(Token.NUMBER)
          case 27 => null // noop
          case 5 => 
             yybegin(STRING)
                     tokenStart = yychar
                     tokenLength = 1
                     null //We need this whenever we don't immediately return a token
          case 28 => null // noop
          case 6 => 
             yybegin(CHARLITERAL)
                     tokenStart = yychar
                     tokenLength = 1
                     null //We need this whenever we don't immediately return a token
          case 29 => null // noop
          case 7 => 
             tokenLength += yylength 
                                     null //We need this whenever we don't immediately return a token
          case 30 => null // noop
          case 8 => 
             yybegin(YYINITIAL)
                                     null //We need this whenever we don't immediately return a token
          case 31 => null // noop
          case 9 => 
             yybegin(YYINITIAL)
                     return new Token(Token.STRING, tokenStart, tokenStart + tokenLength + 1)
          case 32 => null // noop
          case 10 => 
             tokenLength += yylength
                                     null //We need this whenever we don't immediately return a token
          case 33 => null // noop
          case 11 => 
             yybegin(YYINITIAL) 
                                     null //We need this whenever we don't immediately return a token
          case 34 => null // noop
          case 12 => 
             tokenLength += 1 
                     null //We need this whenever we don't immediately return a token
          case 35 => null // noop
          case 13 => 
             yybegin(JDOC_TAG)
                     val start : Int = tokenStart
                     tokenStart = yychar
                     val len : Int = tokenLength
                     tokenLength = 1
                     return new Token(Token.DOC_COMMENT, start, start + len)
          case 36 => null // noop
          case 14 => 
             yybegin(JDOC)
                       val start : Int = tokenStart
                       tokenStart = yychar
                       val len : Int = tokenLength
                       tokenLength = 1
                       return new Token(Token.DOC_COMMENT_TAG, start, start + len)
          case 37 => null // noop
          case 15 => 
             tokenLength += yylength
                                    null //We need this whenever we don't immediately return a token
          case 38 => null // noop
          case 16 => 
             return token(Token.COMMENT)
          case 39 => null // noop
          case 17 => 
             return token(Token.KEYWORD2)
          case 40 => null // noop
          case 18 => 
             tokenLength += yylength 
                     null //We need this whenever we don't immediately return a token
          case 41 => null // noop
          case 19 => 
             tokenLength += yylength
                                                null //We need this whenever we don't immediately return a token
          case 42 => null // noop
          case 20 => 
             tokenLength += yylength
                     null //We need this whenever we don't immediately return a token
          case 43 => null // noop
          case 21 => 
             yybegin(YYINITIAL)
                       return new Token(Token.DOC_COMMENT, tokenStart, tokenStart + tokenLength + 2)
          case 44 => null // noop
          case 22 => 
             yybegin(JDOC)
                       tokenStart = yychar
                       tokenLength = 3
                       null //We need this whenever we don't immediately return a token
          case 45 => null // noop
          case 23 => 
             return token(Token.KEYWORD)
          case 46 => null // noop
          case _ =>
            zzScanError(ZZ_NO_MATCH); null
        }
      }
    }
    ret
  }


}
