/* The following code was generated by JFlex 1.6.1 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package syntaxfx.lexers;

import syntaxfx.Lexer;
import syntaxfx.Token;
 

import java.io.Reader
import scala.util.control.Breaks._

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/jdugan/projects/syntaxfx/src/main/flex/JavaLexer.flex</tt>
 */
final class JavaLexer(in: Reader)  extends Lexer {

  /** This character denotes the end of file */
  final val YYEOF = -1

  /** initial size of the lookahead buffer */
  final val ZZ_BUFFERSIZE = 16384

  /** lexical states */
  final val YYINITIAL = 0
  final val STRING = 2
  final val CHARLITERAL = 4
  final val JDOC = 6
  final val JDOC_TAG = 8

  /**
   * ZZ_LEXSTATE(l) is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE(l+1) is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  final val ZZ_LEXSTATE = Array[Int]( 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  )

  /** 
   * Translates characters to character classes
   */
  final val ZZ_CMAP_PACKED: String = 
    "\11\7\1\3\1\2\1\74\1\75\1\1\16\7\4\0\1\3\1\0\1\24\1\0\1\6\2\0\1\25\2\0\1\5\1\23\1\0\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\102\5\0\1\77\1\14\1\57\1\60\1\61\1\22\1\20\2\100\1\62\2\100\1\12\1\100\1\67\1\63\1\70\1\100\1\73\1\65\1\72\1\100\1\66\1\100\1\13\2\100\1\0\1\26\2\0\1\6\1\0\1\27\1\30\1\34\1\46\1\37\1\51\1\53\1\43\1\44\1\64\1\41\1\36\1\47\1\40\1\35\1\52\1\71\1\33\1\31\1\32\1\45\1\54\1\55\1\50\1\42\1\56\4\0\6\7\1\76\32\7\2\0\4\6\4\0\1\100\2\0\1\7\7\0\1\100\4\0\1\100\5\0\27\100\1\0\37\100\1\0\u01ca\100\4\0\14\100\16\0\5\100\7\0\1\100\1\0\1\100\21\0\160\7\5\100\1\0\2\100\2\0\4\100\1\0\1\100\6\0\1\100\1\0\3\100\1\0\1\100\1\0\24\100\1\0\123\100\1\0\213\100\1\0\5\7\2\0\246\100\1\0\46\100\2\0\1\100\7\0\47\100\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\100\5\0\3\100\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7\3\0\53\100\37\7\4\0\2\100\1\7\143\100\1\0\1\100\10\7\1\0\6\7\2\100\2\7\1\0\4\7\2\100\12\7\3\100\2\0\1\100\17\0\1\7\1\100\1\7\36\100\33\7\2\0\131\100\13\7\1\100\16\0\12\7\41\100\11\7\2\100\4\0\1\100\5\0\26\100\4\7\1\100\11\7\1\100\3\7\1\100\5\7\22\0\31\100\3\7\4\0\13\6\65\0\23\100\2\6\1\0\10\6\26\0\60\7\66\100\3\7\1\100\22\7\1\100\7\7\12\100\2\7\2\0\12\7\1\0\20\100\3\7\1\0\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0\1\100\3\0\4\100\2\0\1\7\1\100\7\7\2\0\2\7\2\0\3\7\1\100\10\0\1\7\4\0\2\100\1\0\3\100\2\7\2\0\12\7\2\100\2\6\7\0\2\6\4\0\3\7\1\0\6\100\4\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100\1\0\2\100\1\0\2\100\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\100\1\0\1\100\7\0\14\7\3\100\1\7\13\0\3\7\1\0\11\100\1\0\3\100\1\0\26\100\1\0\7\100\1\0\2\100\1\0\5\100\2\0\1\7\1\100\10\7\1\0\3\7\1\0\3\7\2\0\1\100\17\0\2\100\2\7\2\0\12\7\1\0\1\6\7\0\1\6\6\7\1\0\3\7\1\0\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100\1\0\5\100\2\0\1\7\1\100\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\100\1\0\3\100\2\7\2\0\12\7\1\0\1\100\20\0\1\7\1\100\1\0\6\100\3\0\3\100\1\0\4\100\3\0\2\100\1\0\1\100\1\0\2\100\3\0\2\100\3\0\3\100\3\0\14\100\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\100\6\0\1\7\16\0\12\7\11\0\1\6\6\0\4\7\1\0\10\100\1\0\3\100\1\0\27\100\1\0\20\100\3\0\1\100\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\100\1\6\5\0\2\100\2\7\2\0\12\7\20\0\1\6\3\7\1\0\10\100\1\0\3\100\1\0\27\100\1\0\12\100\1\0\5\100\2\0\1\7\1\100\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\100\1\0\2\100\2\7\2\0\12\7\1\0\2\100\15\0\4\7\1\0\10\100\1\0\3\100\1\0\51\100\2\7\1\100\7\7\1\0\3\7\1\0\4\7\1\100\5\0\3\6\1\7\7\0\1\6\2\100\2\7\2\0\12\7\12\0\6\100\2\0\2\7\1\0\22\100\3\0\30\100\1\0\11\100\1\0\1\100\2\0\7\100\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\6\0\12\7\2\0\2\7\15\0\60\100\1\7\2\100\7\7\4\0\1\6\7\100\10\7\1\0\12\7\47\0\2\100\1\0\1\100\2\0\2\100\1\0\1\100\2\0\1\100\6\0\4\100\1\0\7\100\1\0\3\100\1\0\1\100\1\0\1\100\2\0\2\100\1\0\4\100\1\7\2\100\6\7\1\0\2\7\1\100\2\0\5\100\1\0\1\100\1\0\6\7\2\0\12\7\2\0\4\100\40\0\1\100\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\100\1\0\44\100\4\0\24\7\1\0\2\7\5\100\13\7\1\0\44\7\11\0\1\7\71\0\53\100\24\7\1\100\12\7\6\0\6\100\4\7\4\100\3\7\1\100\3\7\2\100\7\7\3\100\4\7\15\100\14\7\1\100\17\7\2\0\46\100\1\0\1\100\5\0\1\100\2\0\53\100\1\0\u014d\100\1\0\4\100\2\0\7\100\1\0\1\100\1\0\4\100\2\0\51\100\1\0\4\100\2\0\41\100\1\0\4\100\2\0\7\100\1\0\1\100\1\0\4\100\2\0\17\100\1\0\71\100\1\0\4\100\2\0\103\100\2\0\3\7\40\0\20\100\20\0\125\100\1\6\2\0\6\6\3\0\u026c\100\2\0\21\100\1\0\32\100\5\0\113\100\3\0\3\6\10\100\7\0\15\100\1\0\4\100\3\7\13\0\22\100\3\7\13\0\22\100\2\7\14\0\15\100\1\0\3\100\1\0\2\7\14\0\64\100\40\7\3\0\1\100\3\0\1\6\1\100\1\7\2\0\12\7\41\0\4\7\1\0\12\7\6\0\130\100\10\0\5\100\2\101\42\100\1\7\1\100\5\0\106\100\12\0\37\100\1\0\14\7\4\0\14\7\12\0\12\7\36\100\2\0\5\100\13\0\54\100\4\0\21\6\7\100\2\6\6\0\12\7\46\0\27\100\5\7\4\0\65\100\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\100\10\0\16\7\102\0\5\7\57\100\21\7\7\100\4\0\12\7\21\0\11\7\14\0\3\7\36\100\15\7\2\100\12\7\54\100\16\7\14\0\44\100\24\7\10\0\12\7\3\0\3\100\12\7\44\100\2\0\11\6\107\0\3\7\1\0\25\7\4\100\1\7\4\100\3\7\2\100\3\7\6\0\300\100\72\7\1\0\5\7\u0116\100\2\0\6\100\2\0\46\100\2\0\6\100\2\0\10\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0\37\100\2\0\65\100\1\0\7\100\1\0\1\100\3\0\3\100\1\0\7\100\3\0\4\100\2\0\6\100\4\0\15\100\5\0\3\100\1\0\7\100\16\0\5\7\30\0\1\74\1\74\5\7\20\0\2\6\23\0\1\6\13\0\5\7\1\0\12\7\1\0\1\100\15\0\1\100\20\0\15\100\3\0\40\6\20\0\15\7\4\0\1\7\3\0\14\7\21\0\1\100\4\0\1\100\2\0\12\100\1\0\1\100\3\0\5\100\6\0\1\100\1\0\1\100\1\0\1\100\1\0\4\100\1\0\13\100\2\0\4\100\5\0\5\100\4\0\1\100\21\0\43\6\2\100\4\6\u0a77\0\57\100\1\0\57\100\1\0\205\100\6\0\4\100\3\7\2\100\14\0\46\100\1\0\1\100\5\0\1\100\2\0\70\100\7\0\1\100\17\0\1\7\27\100\11\0\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0\40\7\57\0\1\100\u01d5\0\2\100\1\6\31\0\11\6\6\7\1\0\5\100\2\0\3\6\2\100\4\0\126\100\2\0\2\7\2\0\3\100\1\0\132\100\1\0\4\100\5\0\51\100\1\6\2\0\136\100\21\0\33\100\65\0\20\100\u0200\0\u19b6\100\112\0\u51cd\100\36\6\25\0\u048d\100\103\0\56\100\2\0\u010d\100\3\0\20\100\12\7\2\100\24\0\57\100\1\7\4\0\12\7\1\0\37\100\2\7\106\100\12\6\2\7\45\0\11\100\2\0\147\100\2\0\4\100\1\6\36\100\1\6\1\0\2\100\6\6\77\0\13\100\1\7\3\100\1\7\4\100\1\7\27\100\5\7\20\0\1\6\7\0\64\100\14\0\2\7\62\100\22\7\12\0\12\7\6\0\22\7\6\100\3\0\1\100\1\0\1\6\2\0\12\7\34\100\10\7\2\0\27\100\15\7\14\0\35\100\3\0\4\7\57\100\16\7\16\0\1\100\12\7\6\0\5\100\1\7\12\100\12\7\5\100\1\0\51\100\16\7\11\0\3\100\1\7\10\100\2\7\2\0\12\7\6\0\27\100\3\0\1\100\3\7\62\100\1\7\1\100\3\7\2\100\2\7\5\100\2\7\1\100\1\7\1\100\30\0\3\100\2\0\13\100\5\7\2\0\3\100\2\7\12\0\6\100\2\0\6\100\2\0\6\100\11\0\7\100\1\0\7\100\1\0\53\100\1\0\4\100\4\6\2\100\12\0\120\6\43\100\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\100\14\0\27\100\4\0\61\100\u2104\0\u016e\100\2\0\152\100\46\0\7\100\14\0\5\100\5\0\1\100\1\7\12\100\1\0\15\100\1\0\5\100\1\0\1\100\1\0\2\100\1\0\2\100\1\0\154\100\41\0\u016b\100\22\0\100\100\2\0\66\100\50\0\14\100\1\6\3\0\20\7\20\0\20\7\3\0\2\6\30\0\3\6\31\0\1\6\6\0\5\100\1\0\207\100\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\100\4\0\1\6\1\0\32\100\13\0\131\100\3\0\6\100\2\0\6\100\2\0\6\100\2\0\3\100\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\100\1\0\32\100\1\0\23\100\1\0\2\100\1\0\17\100\2\0\16\100\42\0\173\100\105\0\65\6\210\0\1\7\202\0\35\100\3\0\61\100\17\0\1\7\37\0\40\100\15\0\3\6\21\100\1\6\10\100\1\6\5\0\46\100\5\7\5\0\36\100\2\0\44\100\4\0\10\100\1\0\5\6\52\0\236\100\2\0\12\7\6\0\44\6\4\0\44\6\4\0\50\100\10\0\64\100\234\0\u0137\100\11\0\26\100\12\0\10\100\230\0\6\100\2\0\1\100\1\0\54\100\1\0\2\100\3\0\1\100\2\0\27\100\12\0\27\100\11\0\37\100\101\0\23\6\1\0\2\6\12\0\26\100\12\0\32\100\106\0\70\100\6\0\2\100\100\0\1\100\3\7\1\0\2\7\5\0\4\7\4\100\1\0\3\100\1\0\33\100\4\0\3\7\4\0\1\7\40\0\35\100\3\0\35\100\43\0\10\100\1\0\34\100\2\7\31\0\66\100\12\0\26\100\12\0\23\100\15\0\22\100\156\0\111\100\67\0\63\6\15\0\63\6\u030d\0\3\7\65\100\17\7\37\0\12\7\17\0\4\7\55\100\13\7\2\0\1\7\22\0\31\100\7\0\12\7\6\0\3\7\44\100\16\7\1\0\12\7\20\0\43\100\1\7\2\0\1\100\11\0\3\7\60\100\16\7\4\100\5\0\3\7\3\0\12\7\1\100\1\0\1\6\43\0\22\100\1\0\31\100\14\7\6\0\1\7\101\0\7\6\1\0\1\6\1\0\4\6\1\0\17\6\1\0\12\6\7\0\57\100\14\7\5\0\12\7\6\0\4\7\1\0\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100\1\0\5\100\2\0\1\7\1\100\7\7\2\0\2\7\2\0\3\7\2\0\1\6\6\0\1\7\5\0\5\100\2\7\2\0\7\7\3\0\5\7\213\0\65\6\22\7\4\6\5\0\12\7\46\0\60\100\24\7\2\100\1\0\1\100\10\0\12\7\246\0\57\100\7\7\2\0\11\7\27\0\4\6\2\7\42\0\60\100\21\7\3\0\1\100\13\0\12\7\46\0\53\100\15\7\10\0\12\7\66\0\32\6\3\0\17\7\4\0\12\7\u0166\0\100\100\12\7\25\0\1\100\u0100\0\1\6\12\7\50\6\7\7\1\6\4\7\10\0\1\7\10\0\1\6\13\7\50\6\2\0\4\6\20\7\46\0\71\100\u0107\0\11\6\1\0\45\6\10\7\1\0\10\7\1\6\17\0\12\7\30\0\36\6\2\0\26\7\1\0\16\7\111\0\7\6\1\0\2\6\1\0\46\6\6\7\3\0\1\7\1\0\2\7\1\0\7\7\1\6\1\7\10\0\12\7\u02a6\0\u0399\100\1\6\146\0\157\6\21\0\304\6\u0abc\0\u042f\100\u0fd1\0\u0247\6\u21b9\0\u0239\100\7\0\37\100\1\0\12\7\146\0\36\100\2\0\5\7\13\0\60\100\7\7\11\0\4\100\14\0\12\7\11\0\25\100\5\0\23\100\u0370\0\105\100\13\0\1\100\56\7\20\0\4\7\15\100\100\0\2\6\36\0\u17ed\6\23\0\u02f3\6\u250d\0\2\100\u011d\6\121\0\u018c\6\u0904\0\153\100\5\0\15\100\3\0\11\100\7\0\12\100\3\0\2\7\1\0\4\7\u14c1\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\100\1\0\107\100\1\0\2\100\2\0\1\100\2\0\2\100\2\0\4\100\1\0\14\100\1\0\1\100\1\0\7\100\1\0\101\100\1\0\4\100\2\0\10\100\1\0\7\100\1\0\34\100\1\0\4\100\1\0\5\100\1\0\1\100\3\0\7\100\1\0\u0154\100\2\0\31\100\1\0\31\100\1\0\37\100\1\0\31\100\1\0\37\100\1\0\31\100\1\0\37\100\1\0\31\100\1\0\37\100\1\0\31\100\1\0\10\100\2\0\62\7\u0200\0\67\7\4\0\62\7\10\0\1\7\16\0\1\7\26\0\5\7\1\0\17\7\u0550\0\7\7\1\0\21\7\2\0\7\7\1\0\2\7\1\0\5\7\u07d5\0\305\100\13\0\7\7\51\0\104\6\7\7\5\0\12\7\u04a6\0\4\100\1\0\33\100\1\0\2\100\1\0\1\100\2\0\1\100\1\0\12\100\1\0\4\100\1\0\1\100\1\0\1\100\6\0\1\100\4\0\1\100\1\0\1\100\1\0\1\100\1\0\3\100\1\0\2\100\1\0\1\100\2\0\1\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0\2\100\1\0\1\100\2\0\4\100\1\0\7\100\1\0\4\100\1\0\4\100\1\0\1\100\1\0\12\100\1\0\21\100\5\0\3\100\1\0\5\100\1\0\21\100\u1144\0\ua6d7\100\51\0\u1035\100\13\0\336\100\2\0\u1682\6\16\0\u1d31\6\u0c1f\0\u021e\100\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0"

  /** 
   * Translates characters to character classes
   */
  final val ZZ_CMAP: Array[Char] = zzUnpackCMap(ZZ_CMAP_PACKED)

  /** 
   * Translates DFA states to action switch labels.
   */

  private final val ZZ_ACTION_PACKED_0: String =
    "\5\0\4\1\1\2\2\3\1\2\1\1\1\4\1\5\33\2\1\6\2\7\1\10\1\1\1\6\1\1\2\11\1\12\2\13\1\6\1\14\1\0\3\3\1\0\3\3\1\0\32\2\2\15\33\2\1\16\2\6\1\17\1\6\2\14\1\0\1\20\4\3\1\0\30\2\1\15\36\2\2\0\2\3\31\2\1\21\16\2\2\3\6\2\1\15\7\2\1\15\12\2\2\3\15\2\1\21\1\2\2\3\12\2\2\3\5\2\2\3\5\2\2\3\2\2\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\5\3";

  def zzUnpackAction(): Array[Int] = {
    val result = new Array[Int](328)
    var offset = 0
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
    result
  }

  def zzUnpackAction(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_ACTION: Array[Int] = zzUnpackAction()


  /** 
   * Translates a state to a row index in the transition table
   */

  private final val ZZ_ROWMAP_PACKED_0: String =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u014f\0\u014f\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u014f\0\u014f\0\u0b41\0\u0b84\0\u0bc7\0\u014f\0\u0c0a\0\u014f\0\u014f\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u014f\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u025b\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u014f\0\u1d0d\0\u1d50\0\u014f\0\u014f\0\u1d93\0\u014f\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u1e19\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u025b\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u2312\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122"

  def zzUnpackRowMap(): Array[Int] = {
    val result = new Array[Int](328)
    var offset = 0
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
    result
  }

  def zzUnpackRowMap(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0  /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      val high = packed.charAt(i) << 16; i += 1
      result(j) = high | packed.charAt(i); j += 1; i += 1
    }
    j
  }
  private final val ZZ_ROWMAP: Array[Int] = zzUnpackRowMap()

  /** 
   * The transition table of the DFA
   */

  private final val ZZ_TRANS_PACKED_0: String =
u0100\35\12\1\u0101\6\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\7\12\1\257\35\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\24\12\1\346\20\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\5\12\1\303\37\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\u0102\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\1\u0103\44\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\10\12\1\u0104\34\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\1\u0105\44\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\26\12\1\352\16\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\1\272\44\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\1\264\44\12\2\0\1\12\1\0\2\12\11\0\2\u0106\1\75\1\0\5\u0106\1\0\1\u0106\4\0\2\u0106\3\0\1\u0106\1\0\1\75\1\u0106\6\0\1\u0106\2\0\1\u0106\5\0\3\u0106\31\0\1\u0107\1\74\1\75\2\0\3\u0107\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\27\0\13\12\1\0\1\12\4\0\1\u0108\44\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\1\364\44\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\5\12\1\135\37\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\3\12\1\u0109\41\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\4\12\1\u010a\40\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\15\12\1\u010b\27\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\135\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\u010c\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\17\12\1\225\25\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\u010d\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\22\12\1\u010e\22\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\20\12\1\u010f\24\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\7\12\1\312\35\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\7\12\1\u0110\35\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\24\12\1\214\20\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\5\12\1\u0111\37\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\1\u0112\44\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\4\12\1\352\40\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\5\12\1\u0113\37\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\10\12\1\u0114\34\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\24\12\1\u0115\20\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\7\12\1\u0116\35\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\4\12\1\334\40\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\24\12\1\257\20\12\2\0\1\12\1\0\2\12\11\0\2\u0117\1\75\1\0\5\u0117\1\0\1\u0117\4\0\2\u0117\3\0\1\u0117\1\0\1\75\1\u0117\6\0\1\u0117\2\0\1\u0117\5\0\3\u0117\31\0\1\u0118\1\74\1\75\2\0\3\u0118\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\27\0\13\12\1\0\1\12\4\0\5\12\1\312\37\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\22\12\1\u0119\22\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\6\12\1\u011a\36\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\10\12\1\u011b\34\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\16\12\1\214\26\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\5\12\1\u011c\37\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\1\u011d\44\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\10\12\1\u011e\34\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\13\12\1\135\31\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\3\12\1\u011f\41\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\334\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\3\12\1\346\41\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\42\12\1\u0120\2\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\30\12\1\u0121\14\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\15\12\1\u0122\27\12\2\0\1\12\1\0\2\12\11\0\2\u0123\1\75\1\0\5\u0123\1\0\1\u0123\4\0\2\u0123\3\0\1\u0123\1\0\1\75\1\u0123\6\0\1\u0123\2\0\1\u0123\5\0\3\u0123\31\0\1\u0124\1\74\1\75\2\0\3\u0124\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\27\0\13\12\1\0\1\12\4\0\23\12\1\135\21\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\u0125\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\312\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\10\12\1\u0126\34\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\5\12\1\214\37\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\u0127\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\10\12\1\254\34\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\16\12\1\u0128\26\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\16\12\1\u0129\26\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\27\12\1\352\15\12\2\0\1\12\1\0\2\12\11\0\2\u012a\1\75\1\0\5\u012a\1\0\1\u012a\4\0\2\u012a\3\0\1\u012a\1\0\1\75\1\u012a\6\0\1\u012a\2\0\1\u012a\5\0\3\u012a\31\0\1\u012b\1\74\1\75\2\0\3\u012b\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\27\0\13\12\1\0\1\12\4\0\15\12\1\u012c\27\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\6\12\1\u012d\36\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\3\12\1\225\41\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\10\12\1\u012e\34\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\15\12\1\u012f\4\12\1\u0130\22\12\2\0\1\12\1\0\2\12\11\0\2\u0131\1\75\1\0\5\u0131\1\0\1\u0131\4\0\2\u0131\3\0\1\u0131\1\0\1\75\1\u0131\6\0\1\u0131\2\0\1\u0131\5\0\3\u0131\31\0\1\u0132\1\74\1\75\2\0\3\u0132\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\27\0\13\12\1\0\1\12\4\0\27\12\1\u011f\15\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\22\12\1\135\22\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\11\12\1\u0133\33\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\7\12\1\u0134\35\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\22\12\1\346\22\12\2\0\1\12\1\0\2\12\11\0\2\u0135\1\75\1\0\5\u0135\1\0\1\u0135\4\0\2\u0135\3\0\1\u0135\1\0\1\75\1\u0135\6\0\1\u0135\2\0\1\u0135\5\0\3\u0135\31\0\1\u0136\1\74\1\75\2\0\3\u0136\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\27\0\13\12\1\0\1\12\4\0\5\12\1\257\37\12\2\0\1\12\1\0\2\12\7\0\13\12\1\0\1\12\4\0\17\12\1\346\25\12\2\0\1\12\1\0\2\12\11\0\2\u0137\1\75\1\0\5\u0137\1\0\1\u0137\4\0\2\u0137\3\0\1\u0137\1\0\1\75\1\u0137\6\0\1\u0137\2\0\1\u0137\5\0\3\u0137\31\0\1\u0138\1\74\1\75\2\0\3\u0138\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\2\u0139\1\75\1\0\5\u0139\1\0\1\u0139\4\0\2\u0139\3\0\1\u0139\1\0\1\75\1\u0139\6\0\1\u0139\2\0\1\u0139\5\0\3\u0139\31\0\1\u013a\1\74\1\75\2\0\3\u013a\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\2\u013b\1\75\1\0\5\u013b\1\0\1\u013b\4\0\2\u013b\3\0\1\u013b\1\0\1\75\1\u013b\6\0\1\u013b\2\0\1\u013b\5\0\3\u013b\31\0\1\u013c\1\74\1\75\2\0\3\u013c\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\2\u013d\1\75\1\0\5\u013d\1\0\1\u013d\4\0\2\u013d\3\0\1\u013d\1\0\1\75\1\u013d\6\0\1\u013d\2\0\1\u013d\5\0\3\u013d\31\0\1\u013e\1\74\1\75\2\0\3\u013e\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\2\u013f\1\75\1\0\5\u013f\1\0\1\u013f\4\0\2\u013f\3\0\1\u013f\1\0\1\75\1\u013f\6\0\1\u013f\2\0\1\u013f\5\0\3\u013f\31\0\1\u0140\1\74\1\75\2\0\3\u0140\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\2\u0141\1\75\1\0\5\u0141\1\0\1\u0141\4\0\2\u0141\3\0\1\u0141\1\0\1\75\1\u0141\6\0\1\u0141\2\0\1\u0141\5\0\3\u0141\31\0\1\u0142\1\74\1\75\2\0\3\u0142\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\2\u0143\1\75\1\0\5\u0143\1\0\1\u0143\4\0\2\u0143\3\0\1\u0143\1\0\1\75\1\u0143\6\0\1\u0143\2\0\1\u0143\5\0\3\u0143\31\0\1\u0144\1\74\1\75\2\0\3\u0144\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\33\0\1\75\23\0\1\75\54\0\1\u0145\1\74\1\75\2\0\3\u0145\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\1\u0146\1\74\1\75\2\0\3\u0146\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\1\u0147\1\74\1\75\2\0\3\u0147\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\1\u0148\1\74\1\75\2\0\3\u0148\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\31\0\2\74\1\75\2\0\3\74\1\75\1\101\1\102\13\0\1\75\1\102\6\0\1\75\2\0\1\75\7\0\1\75\21\0";

  def zzUnpackTrans(): Array[Int] = {
    val result = new Array[Int](20837)
    var offset = 0
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result)
    result
  }

  def zzUnpackTrans(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      var value = packed.charAt(i).toInt; i += 1
      value -= 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_TRANS: Array[Int] = zzUnpackTrans()


  /* error codes */
  private final val ZZ_UNKNOWN_ERROR = 0
  private final val ZZ_NO_MATCH = 1
  private final val ZZ_PUSHBACK_2BIG = 2

  /* error messages for the codes above */
  private final val ZZ_ERROR_MSG = Array[String](
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  )

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */

  private final val ZZ_ATTRIBUTE_PACKED_0: String =
    "\5\0\1\11\10\1\2\11\35\1\2\11\3\1\1\11\1\1\2\11\3\1\1\0\2\1\1\11\1\0\3\1\1\0\67\1\1\11\2\1\2\11\1\1\1\11\1\0\5\1\1\0\67\1\2\0\164\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  def zzUnpackAttribute(): Array[Int] = {
    val result = new Array[Int](328)
    var offset = 0
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
    result
  }

  def zzUnpackAttribute(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }
  private final val ZZ_ATTRIBUTE: Array[Int] = zzUnpackAttribute()

  /** the input device */
  var zzReader = in

  /** the current state of the DFA */
  var zzState = 0

  /** the current lexical state */
  var zzLexicalState = YYINITIAL

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  var zzBuffer = new Array[Char](ZZ_BUFFERSIZE)

  /** the textposition at the last accepting state */
  var zzMarkedPos = 0

  /** the current text position in the buffer */
  var zzCurrentPos = 0

  /** startRead marks the beginning of the yytext() string in the buffer */
  var zzStartRead = 0

  /** endRead marks the last character in the buffer, that has been read
      from input */
  var zzEndRead = 0

  /** number of newlines encountered up to the start of the matched text */
  var yyline = 0

  /** the number of characters up to the start of the matched text */
  var yychar = 0

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  var yycolumn = 0

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  var zzAtBOL = true

  /** zzAtEOF == true <=> the scanner is at the EOF */
  var zzAtEOF = false

  /** denotes if the user-EOF-code has already been executed */
  var zzEOFDone = false
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  var zzFinalHighSurrogate = 0

  /* user code: */
    var tokenStart : Int = 0
    var tokenLength : Int = 0

    def token(tokenType : Int) : Token = {
        return new Token(tokenType, yychar, yychar + yylength())
    }

    override def setString(str : String) : Unit = {
        yyreset(new java.io.StringReader(str))
    }

    override def getNextToken() : Unit = {
        yylex()
    }



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  def zzUnpackCMap(packed: String): Array[Char] = {
    val map = new Array[Char](0x110000)
    var i = 0  /* index in packed string  */
    var j = 0  /* index in unpacked array */
    while (i < 3544) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      map(j) = value; j += 1; count -= 1
      while(count > 0){
        map(j) = value; j += 1; count -= 1
      }
    }
    map
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   */
  @throws[java.io.IOException]("if any I/O-Error occurs")
  def zzRefill(): Boolean = {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate
      zzFinalHighSurrogate = 0
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead)

      /* translate stored positions */
      zzEndRead-= zzStartRead
      zzCurrentPos-= zzStartRead
      zzMarkedPos-= zzStartRead
      zzStartRead = 0
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      val newBuffer = new Array[Char](zzBuffer.length*2)
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length)
      zzBuffer = newBuffer
      zzEndRead += zzFinalHighSurrogate
      zzFinalHighSurrogate = 0
    }

    /* fill the buffer with new input */
    val requested = zzBuffer.length - zzEndRead
    var numRead = zzReader.read(zzBuffer, zzEndRead, requested)

    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      numRead = zzReader.read(zzBuffer, zzEndRead, requested)
    }
    if (numRead > 0) {
      zzEndRead += numRead
      if (numRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer(zzEndRead - 1))) {
          zzEndRead -= 1
          zzFinalHighSurrogate = 1
        }
      }
      return false
    }

    true
  }

    
  /**
   * Closes the input stream.
   */
  @throws[java.io.IOException]
  def yyclose(): Unit = {
    zzAtEOF = true            /* indicate end of file */
    zzEndRead = zzStartRead  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close()
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  def yyreset(reader: java.io.Reader): Unit = {
    zzReader = reader
    zzAtBOL  = true
    zzAtEOF  = false
    zzEOFDone = false
    zzEndRead = 0
    zzStartRead = 0
    zzCurrentPos = 0
    zzMarkedPos = 0
    zzFinalHighSurrogate = 0
    yyline = 0
    yychar = 0
    yycolumn = 0
    zzLexicalState = YYINITIAL
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new Array[Char](ZZ_BUFFERSIZE)
  }


  /**
   * Returns the current lexical state.
   */
  def yystate(): Int = zzLexicalState


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  def yybegin(newState: Int): Unit = {
    zzLexicalState = newState
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  def yytext(): String = new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead)


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  def yycharat(pos: Int): Char = zzBuffer(zzStartRead+pos)


  /**
   * Returns the length of the matched text region.
   */
  def yylength(): Int = zzMarkedPos-zzStartRead


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  def zzScanError(errorCode: Int): Unit = {
    var message = ""
    try {
      message = ZZ_ERROR_MSG(errorCode)
    }
    catch {
      case e: ArrayIndexOutOfBoundsException => message = ZZ_ERROR_MSG(ZZ_UNKNOWN_ERROR)
    }

    throw new Error(message)
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
 def yypushback(number: Int): Unit = {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG)

    zzMarkedPos -= number
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   */
 @throws[java.io.IOException]("if any I/O-Error occurs")
 def yylex(): Token = {
    var zzInput = -1
    var zzAction = -1

    // cached fields:
    var zzCurrentPosL = -1
    var zzMarkedPosL = -1
    var zzEndReadL = zzEndRead
    var zzBufferL = zzBuffer
    val zzCMapL = ZZ_CMAP

    val zzTransL: Array[Int] = ZZ_TRANS
    val zzRowMapL: Array[Int] = ZZ_ROWMAP
    val zzAttrL: Array[Int] = ZZ_ATTRIBUTE

    var ret: Token = null

    while ((ret == null) && !zzAtEOF) {
      zzMarkedPosL = zzMarkedPos

      yychar += zzMarkedPosL-zzStartRead

      zzAction = -1

      zzCurrentPosL = zzMarkedPosL
      zzCurrentPos = zzMarkedPosL
      zzStartRead = zzMarkedPosL
  
      zzState = ZZ_LEXSTATE(zzLexicalState)

      // set up zzAction for empty match case:
      var zzAttributes = zzAttrL(zzState)
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState
      }


      breakable {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
            zzCurrentPosL += Character.charCount(zzInput)
          }
          else if (zzAtEOF) {
            zzInput = YYEOF
            break
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL
            zzMarkedPos   = zzMarkedPosL
            val eof = zzRefill()
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos
            zzMarkedPosL   = zzMarkedPos
            zzBufferL      = zzBuffer
            zzEndReadL     = zzEndRead
            if (eof) {
              zzInput = YYEOF
              break
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
              zzCurrentPosL += Character.charCount(zzInput)
            }
          }
          val zzNext = zzTransL(zzRowMapL(zzState) + zzCMapL(zzInput))
          if (zzNext == -1) break
          zzState = zzNext

          zzAttributes = zzAttrL(zzState)
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState
            zzMarkedPosL = zzCurrentPosL
            if ( (zzAttributes & 8) == 8 ) break
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL

      ret = if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true
        return null
      }
      else {
        (if (zzAction < 0) zzAction else ZZ_ACTION(zzAction)) match {
          case 1 => 
             
          case 18 => null // noop
          case 2 => 
             return token(Token.IDENTIFIER)
          case 19 => null // noop
          case 3 => 
             return token(Token.NUMBER)
          case 20 => null // noop
          case 4 => 
             yybegin(STRING)
                                                 tokenStart = yychar
                                                 tokenLength = 1
          case 21 => null // noop
          case 5 => 
             yybegin(CHARLITERAL) 
                                                 tokenStart = yychar 
                                                 tokenLength = 1
          case 22 => null // noop
          case 6 => 
             tokenLength += yylength()
          case 23 => null // noop
          case 7 => 
             yybegin(YYINITIAL)
          case 24 => null // noop
          case 8 => 
             yybegin(YYINITIAL)
                                                  // length also includes the trailing quote
                                                  return new Token(Token.STRING, tokenStart, tokenStart + tokenLength + 1)
          case 25 => null // noop
          case 9 => 
             tokenLength += 1
          case 26 => null // noop
          case 10 => 
             yybegin(JDOC_TAG)
                                                  var start : int = tokenStart
                                                  tokenStart = yychar
                                                  var len : Int = tokenLength
                                                  tokenLength = 1
                                                  return new Token(Token.COMMENT, start, len)
          case 27 => null // noop
          case 11 => 
             yybegin(JDOC)
                                                  // length also includes the trailing quote
                                                  var start : Int = tokenStart
                                                  tokenStart = yychar
                                                  var len : Int = tokenLength
                                                  tokenLength = 1
                                                  return new Token(Token.COMMENT, start, len)
          case 28 => null // noop
          case 12 => 
             return token(Token.COMMENT)
          case 29 => null // noop
          case 13 => 
             return token(Token.KEYWORD)
          case 30 => null // noop
          case 14 => 
             tokenLength += 2
          case 31 => null // noop
          case 15 => 
             yybegin(YYINITIAL)
                                                  return new Token(Token.COMMENT, tokenStart, tokenLength + 2)
          case 32 => null // noop
          case 16 => 
             yybegin(JDOC)
                                                 tokenStart = yychar
                                                 tokenLength = 3
          case 33 => null // noop
          case 17 => 
             return token(Token.TYPE)
          case 34 => null // noop
          case _ =>
            zzScanError(ZZ_NO_MATCH); null
        }
      }
    }
    ret
  }


}
