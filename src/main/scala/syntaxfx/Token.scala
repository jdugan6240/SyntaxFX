package syntaxfx

import Token._

object Token {

    /**
     * This type represents a language operator.
     */
    val OPERATOR: Int = 0

    /**
     * This type represents a reserved keyword in the language.
     */
    val KEYWORD: Int = 1

    /**
     * This type represents a second category of reserved keywords in the language.
     */
    val KEYWORD2: Int = 2

    /**
     * This type represents an identifier in the language.
     */
    val IDENTIFIER: Int = 3

    /**
     * This type represents a string in the language.
     */
    val STRING: Int = 4

    /**
     * This type represents a comment in the language.
     */
    val COMMENT: Int = 5

    /**
     * This type represents a documentation comment in the language (if the language supports them).
     */
    val DOC_COMMENT: Int = 6

    /**
     * This type represents a built-in type supported by the language (usually not keywords).
     */
    val TYPE: Int = 7

    /**
     * This type represents a numeric constant.
     */
    val NUMBER: Int = 8

    /**
     * This type represents a token type that is unrecognized by the lexer.
     */
    val OTHER: Int = 9
}

/**
  * The Token class represents a single token generated by a Lexer.
  * @author James Dugan
  */
class Token (var tokenType: Int, var start: Int, var end: Int) {

  /**
    * Returns the length of the token.
    * @return The length of the token
    */
  def length(): Int = end - start

}
