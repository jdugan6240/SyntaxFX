package syntaxfx;

/**
 * The Token class represents a single token generated by a Lexer.
 * @author James Dugan
 */
public class Token {
    /**
     * This type represents a language operator.
     */
    public final static int OPERATOR = 0;
    /**
     * This type represents a reserved keyword in the language.
     */
    public final static int KEYWORD = 1;
    /**
     * This type represents a second category of reserved keywords in the language.
     */
    public final static int KEYWORD2 = 2;
    /**
     * This type represents an identifier in the language.
     */
    public final static int IDENTIFIER = 3;
    /**
     * This type represents a string in the language.
     */
    public final static int STRING = 4;
    /**
     * This type represents a comment in the language.
     */
    public final static int COMMENT = 5;
    /**
     * This type represents a documentation comment in the language (if the language supports them).
     */
    public final static int DOC_COMMENT = 6;
    /**
     * This type represents a built-in type supported by the language (usually not keywords).
     */
    public final static int TYPE = 7;
    /**
     * This type represents a numeric constant.
     */
    public final static int NUMBER = 8;
    /**
     * This type represents a token type that is unrecognized by the lexer.
     */
    public final static int OTHER = 9;

    /**
     * This represents the start location of the token.
     */
    public int start;
    /**
     * This represents the end of the token.
     */
    public int end;
    /**
     * This represents the type of token.
     */
    public int type;

    /**
     * Creates a new Token with the given type, start, and end.
     * @param type The type of token this token is to represent
     * @param start The start location of the token
     * @param end The end of the token
     */
    public Token(int type, int start, int end) {
        this.type = type;
        this.start = start;
        this.end = end;
    }

    /**
     * Returns the length of the token.
     * @return The length of the token
     */
    public int length() {
        return end - start;
    }
}
